name: "Pkg Action"
description: "A GitHub Action for 'compiling' node projects into binaries using vercel/pkg."
inputs:
  # Required
  entrypoint:
    description: "The binary entrypoint path"
    required: true

  # Optional
  arch:
    description: "The architecture to build for x64|amd64|aarch64|arm64"
    required: false
    default: amd64
  config:
    description: "The config file to use"
    required: false
    default: package.json
  node-version:
    description: "The node version to package with"
    required: false
    default: node14
  options:
    description: "Additional options and flags to pass into pkg"
    required: false
  os:
    description: "The operating system to build for win|linux|macos"
    required: false
    default: ${{ runner.os }}
  test:
    description: "Hidden flag for input testing"
    default: false
    required: false
  upload:
    description: "Upload the artifacts. Useful if you need to grab them for downstream for things like code signing."
    required: false
    default: true

outputs:
  file:
    description: "The path to the generated binary."
    value: ${{ steps.pkg-action.outputs.file }}
  artifact-key:
    description: "The artifact upload key."
    value: ${{ steps.pkg-action.outputs.artifact-key }}

runs:
  using: composite
  steps:
    - name: Validate required inputs
      shell: bash
      run: |
        echo "::group::Ensure entrypoint is set"
        if [ "${{ inputs.entrypoint }}" == "" ]; then
          echo "::error title=Entrypoint is not set!::You must specify an entrypoint file in order to run this shit."
          exit 47
        fi
        echo "::endgroup::"

    - name: Set internal outputs
      shell: bash
      id: pkg-action-internal
      run: |
        echo "::group::Setting internal outputs"
        if [ "${{ inputs.os }}" == "Linux" ]; then
          echo "::set-output name=target-os::linux"
        elif [ "${{ inputs.os }}" == "macOS" ]; then
          echo "::set-output name=target-os::macos"
        elif [ "${{ inputs.os }}" == "Windows" ]; then
          echo "::set-output name=target-os::win"
        else
          echo "::set-output name=target-os::${{ inputs.os }}"
        fi

        if [ "${{ inputs.arch }}" == "amd64" ]; then
          echo "::set-output name=target-arch::x64"
        elif [ "${{ inputs.arch }}" == "aarch64" ]; then
          echo "::set-output name=target-arch::arm64"
        else
          echo "::set-output name=target-arch::${{ inputs.arch }}"
        fi

        echo "::set-output name=target-node::${{ inputs.node-version }}"
        echo "::endgroup::"

    - name: Install node 14
      uses: actions/setup-node@v3
      with:
        node-version: 14
        cache: npm

    - name: Install pkg
      shell: bash
      run: |
        npm install -g pkg@5.6.0
        if pkg --version >/dev/null; then
          echo "::notice title=pkg installed::Using package version $(pkg --version)"
        else
          echo "::error title=Cannot run pkg::Cannot seem to find the pkg binary"
        fi

    - name: Set outputs
      shell: bash
      id: pkg-action
      run: |
        echo "::group::Setting outputs"
        if [ "${{ steps.pkg-action-internal.outputs.target-os }}" == "win" ]; then
          echo "::set-output name=file::dist/$(node -p "require('./package.json').name").exe"
        else
          echo "::set-output name=file::dist/$(node -p "require('./package.json').name")"
        fi

        echo "::set-output name=artifact-key::${{ github.event.repository.name }}-${{ steps.pkg-action-internal.outputs.target-node }}-${{ steps.pkg-action-internal.outputs.target-os }}-${{ steps.pkg-action-internal.outputs.target-arch }}-${{ github.sha }}"
        echo "::endgroup::"


    # - name: Validate outputs
    #   shell: bash
    #   run: |
    #     echo "::group::Validating package output"
    #     if [ "${{ steps.auto-deploy-action.outputs.package }}" == "" ]; then
    #       echo "::error title=Package name is empty!::Package either not set or could not autodetect."
    #       exit 10
    #     fi
    #     echo "::endgroup::"

    #     echo "::group::Validating version output"
    #     if [ "${{ steps.auto-deploy-action.outputs.version }}" == "" ]; then
    #       echo "::error title=Version is empty!::Version either not set or could not autodetect."
    #       exit 11
    #     fi
    #     echo "::endgroup::"
